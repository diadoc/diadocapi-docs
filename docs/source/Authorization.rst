Авторизация
===========

.. contents:: :local:
	:depth: 3

Чтобы работать с API Диадока, нужно авторизоваться.

Сейчас Диадок поддерживает две схемы авторизации:

	- :ref:`с помощью OpenID Connect <auth_oidc>` — рекомендуемый способ авторизации;
	- :ref:`с помощью методов Диадока <auth_authenticate>` — нерекомендуемый устаревший способ авторизации.


.. _auth_oidc:

Авторизация через OpenID Connect
--------------------------------

Диадок предоставляет возможность авторизоваться в продукте по протоколу `OpenID Connect <https://openid.net/connect/>`__. Авторизация происходит с помощью сервиса `OpenID Провайдер <https://developer.kontur.ru/Docs/html/index.html>`__ — аутентификационного сервера, который реализует протокол OpenID Connect и выдает ключ доступа — токен.

Токен (``access_token``) — это идентификатор, который позволяет идентифицировать пользователя и выполнять действия от его имени в API. Его нужно передавать в методы API Диадока в HTTP-заголовке ``Authorization``:

::

    Authorization: Bearer <access_token>

Например, HTTP-запрос на получение списка доступных пользователю ящиков будет выглядеть так:

::

    POST https://diadoc-api.kontur.ru/GetMyOrganizations HTTP/1.1
    Host: diadoc-api.kontur.ru
    Authorization: Bearer <access_token>

Для получения токена через OpenID Connect нужен ключ разработчика — уникальный идентификатор интегратора в формате GUID. Чтобы получить ключ разработчика, оставьте заявку на `странице интеграции <https://www.diadoc.ru/integrations/api>`__. Не передавайте свой ключ третьим лицам.

Порядок взаимодействия сторон при этом способе авторизации выглядит следующим образом:

#. Пользователь входит в интеграционное решение.
#. Интергационное решение перенаправляет пользователя в сервис OpenID Провайдера.
#. Пользователь вводит свои данные для авторизации.
#. OpenID Провайдер предоставляет интеграционному решению временный авторизационный код ``authorization_code``.
#. Интеграционное решение отправляет в OpenID Провайдер временный авторизационный код ``authorization_code`` для обмена на токен ``access_token``.
#. OpenID Провайдер возвращает интеграционному решению токен ``access_token``.
#. Интеграционное решение передает ``access_token`` в методы API Диадока.
#. Диадок возвращает ответ метода API интеграционному решению.

.. _oidc_integrator:

Регистрация интеграционного решения
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Чтобы ваше интеграционное решение могло взаимодействовать с OpenID Провайдером, его нужно зарегистрировать в Кабинете Интегратора.
Это действие нужно выполнить только один раз — когда вы решили подключить интеграционное решение к Провайдеру.

#. Перейдите в `Кабинет Интегратора <https://integrations.kontur.ru/>`__.
#. Нажмите кнопку «Создать приложение».
#. В открывшемся списке выберите приложение «Kontur.Authentication».
#. В открывшихся настройках выберите следующие значения:

	#. Вкладка «OpenId Flow»: «Способ получения токенов» — «AuthorizationCode».
	#. Вкладка «Общие данные»: в поле «Имя приложения» введите свой ``client_id``.
	#. Вкладка «Редиректы»: задайте адреса для перенаправления после входа пользователя в ваше приложение. Для ручного тестирования можно указать http://localhost.
	#. Вкладка «Доступы к информации»: убедитесь, что включена опция «Доступ на получение данных в фоновом режиме (offline_access)» — это необходимо для получения Refresh Token.
	#. Вкладка «Доступы»: здесь вы можете выдать права доступа к данным вашим коллегам.
	#. Вкладка «Страница разрешений OpenId»: введите данные, которые будут видеть ваши пользователи при авторизации в сервисе OpenID Провайдера.
	#. Вкладка «Создание»: проверьте указанные данные и завершите создание приложения.

Получение токена
~~~~~~~~~~~~~~~~

.. note::
	Подробная инструкция по получению токена приведена на странице `Аутентификация в приложении и авторизация в продукты Контура <https://developer.kontur.ru/Docs/html/schemes/auth_and_authorize.html>`__.

Получение токена ``access_token`` происходит в два этапа:

1. Получение временного кода авторизации — ``authorization_code``.

 Для получения ``authorization_code`` интеграционное решение должно перенаправить пользователя на страницу авторизации Authorization Endpoint с помощью запроса в сервис OpenID Провайдера. Все передаваемые параметры должны быть в формате url_encoded.

 При запросе временного кода авторизации ``authorization_code`` нужно указать в параметре ``scope`` следующие значения для доступа к данным Диадока:

  - ``Diadoc.PublicAPI.Staging`` — для работы с тестовым пространством Диадока;
  - ``Diadoc.PublicAPI`` — для работы с продуктовым пространством Диадока.

2. Обмен временного кода авторизации ``authorization_code`` на ``access_token``.

 Для получения ``access_token`` интеграционное решение должно выполнить запрос на Token Endpoint сервиса OpenID Провайдера. Вместе с ``access_token`` вернется и ``refresh_token``, который необходим для :ref:`обновления токена <auth_refresh_token>` ``access_token`` по истечении срока его жизни. 

.. _auth_refresh_token:

Обновление токена
~~~~~~~~~~~~~~~~~

.. note::
	Подробная инструкция по обновлению токена приведена на странице `Обновление Access Token <https://developer.kontur.ru/Docs/html/schemes/using_refresh.html>`__.

Время жизни токена ``access_token`` — 24 часа. До истечения этого времени его нужно обновить, иначе методы API будут возвращать ошибки, а пользователю вновь придется авторизовываться в OpenID Провайдере.

Чтобы обновить токен ``access_token``, нужно использовать ``refresh_token``, полученный вместе с ним при запросе. Для этого интеграционное решение должно выполнить запрос на Token Endpoint сервиса OpenID Провайдера.

Время жизни ``refresh_token`` — 15 суток. После этого пользователю придется снова авторизовываться в OpenID Провайдере.

Проверка прав пользователя
~~~~~~~~~~~~~~~~~~~~~~~~~~

Методы, работающие с определенным ящиком, контролируют доступ к нему по следующему алгоритму:

1. Диадок извлекает из HTTP-заголовка ``Authorization`` значение параметра ``access_token``. С его помощью определяется идентификатор пользователя. Если какое-то действие не удалось выполнить, метод вернет код ошибки ``401 (Unauthorized)``. Это возможно в следующих случаях:

 - в запросе отсутствует HTTP-заголовок ``Authorization``,
 - в HTTP-заголовке ``Authorization`` не указан access_token,
 - токен поврежден или просрочен.

2. По идентификатору пользователя Диадок находит ящики, к которым у пользователя есть доступ. Список ящиков совпадает со списком, который вернет метод :doc:`http/GetMyOrganizations`.
3. Сервер извлекает идентификатор ящика из параметров запроса. Если идентификатор ящика не входит в список ящиков, доступных пользователю, метод вернет код ошибки ``403 (Forbidden)``.


.. _auth_authenticate:

Авторизация через методы Диадока
--------------------------------

.. warning::
	Способ авторизации с помощью методов API Диадока является устаревшим и не рекомендуется к использованию. Используйте вместо него :ref:`авторизацию через OpenID Connect <auth_oidc>`.

Для авторизации с помощью методов API нужна следующая информация:

	- ключ разработчика — уникальный идентификатор интегратора в формате GUID. Чтобы получить ключ разработчика, оставьте заявку на `странице интеграции <https://www.diadoc.ru/integrations/api>`__. Не передавайте свой ключ третьим лицам.
	- авторизационный токен — массив байтов, однозначно идентифицирующий пользователя.

Эту информацию нужно передавать в стандартном HTTP-заголовке ``Authorization`` в соответствии со схемой аутентификации Диадока ``DiadocAuth`` со следующими параметрами:

	- ``ddauth_api_client_id`` — определяет ключ разработчика,
	- ``ddauth_token`` — определяет авторизационный токен.

Значения параметров в заголовке отделяются от их имен символами «=», параметры разделяются символами «,». Например:

::

    Authorization: DiadocAuth
    ddauth_api_client_id=testClient-8ee1638deae84c86b8e2069955c2825a,
    ddauth_token=3IU0iPhuhHPZ6lrlumGz4pICEedhQ1XmlMN1Pk8z0DJ51MXkcTi6Q3CODCC4xTMsjPFfhK6XM4kCJ4JJ42hlD499/Ui5WSq6lrPwcdp4IIKswVUwyE0ZiwhlpeOwRjNrvUX1yPrxr0dY8a0w8ePsc1DG8HAlZce8a0hZiWylMqu23d/vfzRFuA==

..

Получение авторизационного токена
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Подробная информация обо всех способах получения токена приведена на странице метода :doc:`http/obsolete/Authenticate`.

При вызове метода ``Authenticate`` в параметре ``ddauth_api_client_id`` HTTP-заголовка ``Authorization`` передайте ключ разработчика.

Необязательно вызывать метод :doc:`http/obsolete/Authenticate` перед каждым обращением к методам API Диадока — авторизационные токены можно кэшировать. Мы рекомендуем сохранить и использовать полученный токен в течение всего сеанса работы. Полученный токен остается действительным в течение 24 часов.

Авторизация при вызове методов API
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Ключ разработчика и полученный авторизационный токен нужно передавать в каждый метод API. Для этого при вызове методов API нужно к каждому запросу добавлять HTTP-заголовок ``Authorization`` с параметрами ``ddauth_api_client_id`` и ``ddauth_token``. Например, HTTP-запрос на получение списка доступных пользователю ящиков будет выглядеть так:

::

    POST https://diadoc-api.kontur.ru/GetMyOrganizations HTTP/1.1
    Host: diadoc-api.kontur.ru
    Authorization: DiadocAuth ddauth_api_client_id=testClient-8ee1638deae84c86b8e2069955c2825a,ddauth_token=3IU0iPhuhHPZ6lrlumGz4pICEedhQ1XmlMN1Pk8z0DJ51MXkcTi6Q3CODCC4xTMsjPFfhK6XM4kCJ4JJ42hlD499/Ui5WSq6lrPwcdp4IIKswVUwyE0ZiwhlpeOwRjNrvUX1yPrxr0dY8a0w8ePsc1DG8HAlZce8a0hZiWylMqu23d/vfzRFuA==

Проверка прав пользователя
~~~~~~~~~~~~~~~~~~~~~~~~~~

Методы, работающие с определенным ящиком, контролируют доступ к нему по следующему алгоритму:

1. Сервер Диадока извлекает из HTTP-заголовка ``Authorization`` значение параметра ``ddauth_token``. После его декодирования сервер получает идентификатор пользователя. Если какое-то действие не удалось выполнить, метод вернет код ошибки ``401 (Unauthorized)``. Это возможно в случаях, когда:

 - в запросе отсутствует HTTP-заголовок ``Authorization``,
 - нет параметра ``ddauth_token``,
 - токен поврежден или просрочен,
 - указан некорректный ``ddauth_api_client_id``.

2. По идентификатору пользователя Диадок находит ящики, к которым у пользователя есть доступ. Список ящиков совпадает со списком, который вернет метод :doc:`http/GetMyOrganizations`.
3. Сервер извлекает идентификатор ящика из параметров запроса. Если идентификатор ящика не входит в список ящиков, доступных пользователю, метод вернет код ошибки ``403 (Forbidden)``.


----

.. rubric:: См. также

*Методы для аутентификации:*
    - :doc:`http/obsolete/Authenticate` — аутентифицирует пользователя в Диадоке
    - :doc:`http/obsolete/AuthenticateConfirm` — возвращает авторизационный токен при аутентификации по сертификату